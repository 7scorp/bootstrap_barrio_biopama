<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use \Drupal\taxonomy\Entity\Term;

/*
* implements hook_view_pre_render()
*/
function bootstrap_barrio_biopama_views_pre_render(\Drupal\views\ViewExecutable $view)
{
	switch($view->current_display){
		case 'region_list':
		case 'rest_export_1':
		case 'rest_export_2':
		case 'rest_export_3':
			break;
		default:
			$userAnon = \Drupal::currentUser()->isAnonymous();
			$nids = array(); // array of nodes to prevent duplicates
			$resultNoDoubleNodes = array(); // manipulated results
			$skipped = 0;
			$nothin = 0;
			$track = 0;
			foreach($view->result as $key => $result) // check each node of the result array on its nid
			{
				if(property_exists($result, 'nid')){
					$nid = $result->nid;
				} else {
					$nid = $track;
					$track++;
				}
				//dsm($view->result); 
				if (!in_array($nid, $nids)) // if this node isn't a duplicate
				{
					$view->result[$key]->index = ($key - $skipped);
					$resultNoDoubleNodes[] = $view->result[$key]; // add it to the manipulated results
					$nids[$key] = $nid; // mark this nid as in results to prevent duplicates from now on
				} else {
					$skipped++;
				}
			}
			$view->result = $resultNoDoubleNodes; // replace the old results with the results without duplicates
			foreach($view->result as $key => $result) // check each node of the result array on its nid
			{
				$entity = $result->_entity;
				$isPub = $entity->isPublished();
				if($userAnon == TRUE && $isPub == FALSE){
					unset($view->result[$key]);
				}
			}
		  break;
	}

	
/*   switch($view->current_display)
  {
    case 'block_global':
	case 'block_regional':
	case 'block_national':
	case 'block_local':
	case 'goal_block_1':
	case 'indicator_block_1':
	case 'indicator_list':
	case 'indicator_theme':
		$userAnon = \Drupal::currentUser()->isAnonymous();
		$nids = array(); // array of nodes to prevent duplicates
		$resultNoDoubleNodes = array(); // manipulated results
		$skipped = 0;
		$nothin = 0;
		foreach($view->result as $key => $result) // check each node of the result array on its nid
		{
			$nid = $result->nid;
			//dsm($view->result); 
			if (!in_array($nid, $nids)) // if this node isn't a duplicate
			{
				$view->result[$key]->index = ($key - $skipped);
				$resultNoDoubleNodes[] = $view->result[$key]; // add it to the manipulated results
				$nids[$key] = $nid; // mark this nid as in results to prevent duplicates from now on
			} else {
				$skipped++;
			}
		}
		$view->result = $resultNoDoubleNodes; // replace the old results with the results without duplicates
		foreach($view->result as $key => $result) // check each node of the result array on its nid
		{
			$entity = $result->_entity;
			$isPub = $entity->isPublished();
			if($userAnon == TRUE && $isPub == FALSE){
				unset($view->result[$key]);
			}
		}
		break;
	//case 'goal_block_1':
	//  $node = \Drupal\node\Entity\Node::load($id);
	//  $node->getTitle();
	//  break;
    default:
      break;
  } */
}

/**
 * Implements hook_theme_suggestions_page_alter().
 * https://www.drupal.org/node/2521876#comment-10684366
 */
function bootstrap_barrio_biopama_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $node = NULL;
  $revision = NULL;
  if (\Drupal::routeMatch()->getParameter('node')) {
	//revision IDs are strings and node ids are strings when a revision is loaded.
    $node = \Drupal::routeMatch()->getParameter('node');
	$revision = \Drupal::routeMatch()->getRawParameter('node_revision');
  }
  $tid = NULL;
  $term = NULL;
  if (\Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
	$tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
    $term = Term::load($tid);
  }
  
  //node parameters loaded by getParameter are objects and the bundle can be accessed normally.
  if (!empty($node)) {
    if ($revision) {
      $revised_node = \Drupal::entityTypeManager()
                             ->getStorage('node')
                             ->loadRevision($revision);
      $content_type = $revised_node->bundle();
    }
    else {
      $content_type = $node->bundle();
    }
    $suggestions[] = 'page__' . $content_type;
  }
  if (!empty($term)) {
     $vid = $term->vid->getValue();
     $suggestions[] = 'page__taxonomy__vocabulary__' . $vid[0]['target_id'];
   }
}
 
function bootstrap_barrio_biopama_preprocess(&$variables, $hook) {
  $current_path = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = $current_path;
  $variables['current_uri'] = \Drupal::request()->getRequestUri();
  if ($variables['current_path'] == '/map') {
    $variables['is_map'] = TRUE;
  } else {
    $variables['is_map'] = FALSE;
  }
  // Ensure the cache varies correctly (new in Drupal 8.3).
  $variables['#cache']['contexts'][] = 'url.path';
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['language'] = $language;
}
function bootstrap_barrio_biopama_preprocess_page(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  //dsm($current_path); 
  if ($current_path == '/rest') {
    $variables['#attached']['library'][] = 'bootstrap_barrio_biopama/rest-checker';
  }
}

function bootstrap_barrio_biopama_preprocess_node(&$variables) {
	//\Drupal::logger('theme')->notice('preprocess_node was called');
	$node = $variables['node'];
	
 	switch($node->getType()){
		case 'policy':
			$variables['#attached']['library'][] = 'bootstrap_barrio_biopama/policy-style';
			break;
		case 'indicator':
			$variables['#attached']['library'][] = 'bootstrap_barrio_biopama/indicator-card';
			break;
		default:
			break; 
	}
}
